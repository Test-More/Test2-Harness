package App::Yath::Schema::Overlay::Job;
our $VERSION = '2.000000';

package
    App::Yath::Schema::Result::Job;
use utf8;
use strict;
use warnings;

use Carp qw/confess/;
confess "You must first load a App::Yath::Schema::NAME module"
    unless $App::Yath::Schema::LOADED;

sub file {
    my $self = shift;
    my %cols = $self->get_all_fields;

    return $cols{file}     if exists $cols{file};
    return $cols{filename} if exists $cols{filename};

    my $test_file = $self->test_file or return undef;
    return $test_file->filename;
}

sub shortest_file {
    my $self = shift;
    my $file = $self->file or return undef;

    return $1 if $file =~ m{([^/]+)$};
    return $file;
}

sub short_file {
    my $self = shift;
    my $file = $self->file or return undef;

    return $1 if $file =~ m{/(t2?/.*)$}i;
    return $1 if $file =~ m{([^/\\]+\.(?:t2?|pl))$}i;
    return $file;
}

my %COMPLETE_STATUS = (complete => 1, failed => 1, canceled => 1, broken => 1);
#sub complete { return $COMPLETE_STATUS{$_[0]->status} // 0 }
sub complete { 0 }

sub sig {
    my $self = shift;

    return "FIXME";
#    return join ";" => (
#        (map {$self->$_ // ''} qw/name file fail/),
#        $parameters ? length($parameters) : (''),
#        ($self->job_fields->count),
#    );
}

#sub short_job_fields {
#    my $self = shift;
#    my %params = @_;
#
#    my @fields = $params{prefetched_fields} ? $self->job_fields : $self->job_fields->search(
#        undef, {
#            remove_columns => ['data'],
#            '+select'      => ['data IS NOT NULL AS has_data'],
#            '+as'          => ['has_data'],
#        }
#    )->all;
#
#    my @out;
#    for my $jf (@fields) {
#        my $fields = {$jf->get_all_fields};
#
#        my $has_data = delete $fields->{data};
#        $fields->{has_data} //= $has_data ? \'1' : \'0';
#
#        push @out => $fields;
#    }
#
#    return \@out;
#}

sub TO_JSON {
    my $self = shift;
    my %cols = $self->get_all_fields;

    $cols{short_file}    = $self->short_file;
    $cols{shortest_file} = $self->shortest_file;

    # FIXME?
#    $cols{fields} = $self->short_job_fields(prefetched => $cols{prefetched_fields});

    return \%cols;
}

my @GLANCE_FIELDS = qw{ exit_code fail fail_count job_key job_try retry name pass_count file status job_idx run_id };

sub glance_data {
    my $self = shift;
    my %params = @_;

    # FIXME: Handle this
    my $try_id = $params{try_id};

    my %cols = $self->get_all_fields;

    my %data;
    @data{@GLANCE_FIELDS} = @cols{@GLANCE_FIELDS};

    $data{file}          = $self->file;
    $data{short_file}    = $self->short_file;
    $data{shortest_file} = $self->shortest_file;

#    $data{fields} = $self->short_job_fields(prefetched => $cols{prefetched_fields});

    return \%data;
}

1;

__END__

=pod

=encoding UTF-8

=head1 NAME

App::Yath::Schema::Result::Job - Overlay for Job result class.

=head1 DESCRIPTION

This is where custom (not autogenerated) code for the Job result class lives.

=head1 SOURCE

The source code repository for Test2-Harness can be found at
L<http://github.com/Test-More/Test2-Harness/>.

=head1 MAINTAINERS

=over 4

=item Chad Granum E<lt>exodist@cpan.orgE<gt>

=back

=head1 AUTHORS

=over 4

=item Chad Granum E<lt>exodist@cpan.orgE<gt>

=back

=head1 COPYRIGHT

Copyright Chad Granum E<lt>exodist7@gmail.comE<gt>.

This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

See L<http://dev.perl.org/licenses/>

=cut
