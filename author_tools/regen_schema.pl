use strict;
use warnings;

use DBIx::QuickDB;

use Test2::Harness::UI::Util qw/qdb_driver dbd_driver/;
my $version = Test2::Harness::UI::Util->VERSION;

my $schemadir = './share/schema/';

opendir(my $dh, $schemadir) or die "Could not open schema dir: $!";
for my $schema_file (sort readdir($dh)) {
    next unless $schema_file =~ m/\.sql$/;

    my $schema = $schema_file;
    $schema =~ s/\.sql$//;

    my $qdb_driver = qdb_driver($schema_file);
    my $dbd_driver = dbd_driver($schema_file);

    print "Generating $schema using qdb driver '$qdb_driver' and dbd driver '$dbd_driver'\n";

    my $db = DBIx::QuickDB->build_db($schema => {driver => $qdb_driver, dbd_driver => $dbd_driver});
    {
        my $dbh = $db->connect('quickdb', AutoCommit => 1, RaiseError => 1);
        $dbh->do('CREATE DATABASE harness_ui') or die "Could not create db " . $dbh->errstr;
        $db->load_sql(harness_ui => "${schemadir}/${schema_file}");
    }

    mkdir("./tmp");
    system('rm', '-rf', "./tmp/$schema");
    mkdir("./tmp/$schema");
    system(
        'dbicdump',
        '-o' => 'dump_directory=./tmp/' . $schema,
        '-o' => 'components=["InflateColumn::DateTime", "InflateColumn::Serializer", "InflateColumn::Serializer::JSON", "Tree::AdjacencyList", "UUIDColumns"]',
        '-o' => 'debug=0',
        '-o' => 'generate_pod=0',
        '-o' => 'skip_load_external=1',
        'Test2::Harness::UI::Schema',
        $db->connect_string('harness_ui'),
        '',
        ''
    ) and die "Error";

    open(my $fh, '>', "tmp/${schema}.pm") or die "Could not open file: $!";
    print {$fh} <<"    EOT";
package Test2::Harness::UI::Schema::${schema};
use utf8;
use strict;
use warnings;
use Carp();

our \$VERSION = '$version';

# DO NOT MODIFY THIS FILE, GENERATED BY ${ \__FILE__ }\n

Carp::confess("Already loaded schema '\$Test2::Harness::UI::Schema::LOADED'") if \$Test2::Harness::UI::Schema::LOADED;

\$Test2::Harness::UI::Schema::LOADED = "${schema}";

    EOT
    opendir(my $dh, "tmp/$schema/Test2/Harness/UI/Schema/Result/") or die "Could not open dir: $!";
    for my $file (sort readdir($dh)) {
        next unless $file =~ m/\.pm$/;
        my $override = "lib/Test2/Harness/UI/Schema/Result/$file";
        unless (-e $override) {
            print "Adding 'override' file '$override'\n";
            open(my $oh, '>', $override) or die "Could not open override file: $!\n";
            my $pkg = $file;
            $pkg =~ s/\.pm$//;
            my $ver = Test2::Harness::UI::Util->VERSION;
            print $oh <<"            EOT";
package Test2::Harness::UI::Schema::Result::$pkg;
use utf8;
use strict;
use warnings;

use Carp qw/confess/;
confess "You must first load a Test2::Harness::UI::Schema::NAME module"
    unless \$Test2::Harness::UI::Schema::LOADED;

our \$VERSION = '$ver';

1;
            EOT
            close($oh);
        }
        print "Appending ${file} to ${schema}.pm\n";
        open(my $rh, '<', "tmp/$schema/Test2/Harness/UI/Schema/Result/$file") or die "Could not open $file: $!";
        print {$fh} "{\n";
        for my $line (<$rh>) {
            next if $line =~ m/^\s*#/;
            next if $line =~ m/^use (utf8|strict|warnings);/;
            next if $line =~ m/^\s*1;\n?$/;
            $line =~ s/package\s+(\S+)/package #\n    $1/;
            print {$fh} $line;
        }
        print {$fh} "}\n\n";
    }

    print {$fh} "\n1;\n";

    close($fh);
    system('perltidy', '-se', "-pro=./.perltidyrc", "tmp/${schema}.pm", "-o=lib/Test2/Harness/UI/Schema/${schema}.pm") and die "perltidy failed";
}

system('rm -rf ./tmp');
