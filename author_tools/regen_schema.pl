use strict;
use warnings;

use DBIx::Class::Schema::Loader 'make_schema_at';
use DBIx::Class::Storage::DBI::MariaDB;
use DBIx::QuickDB;

use App::Yath::Schema::Util qw/qdb_driver dbd_driver format_driver/;
my $version = App::Yath::Schema::Util->VERSION;

my $schemadir = './share/schema/';

my $start_pid = $$;

my @todo;
if (@ARGV) {
    @todo = map { /\.sql$/ ? $_ : "${_}.sql"} @ARGV;
}

unless (@todo) {
    opendir(my $dh, $schemadir) or die "Could not open schema dir: $!";
    @todo = sort readdir($dh);
}

for my $schema_file (@todo) {
    exit(0) unless $$ == $start_pid;
    next unless $schema_file =~ m/\.sql$/;

    my $schema = $schema_file;
    $schema =~ s/\.sql$//;

    my $loop_pid = fork;
    if ($loop_pid) {
        waitpid($loop_pid, 0);
        next;
    }

    local $ENV{PATH} = "$ENV{HOME}/percona/bin:$ENV{PATH}" if $schema_file =~ /Percona/ && -x "$ENV{HOME}/percona/bin/mysqld";

    my $qdb_driver = qdb_driver($schema_file);
    my $dbd_driver = dbd_driver($schema_file);
    my $format     = format_driver($schema_file);

    # Schema dumper does not like DBD::MariaDB
#    $dbd_driver = 'DBD::mysql' if $dbd_driver eq 'DBD::MariaDB';

    print "Generating $schema using qdb driver '$qdb_driver' and dbd driver '$dbd_driver'\n";

    #$qdb_driver = 'MySQL' if $qdb_driver eq 'Percona';

    my $db;
    unless (eval { $db = DBIx::QuickDB->build_db($schema => {driver => $qdb_driver, dbd_driver => $dbd_driver}); 1 }) {
        warn $@;
        next;
    }

    {
        my $dbh;
        if ($schema_file =~ m/SQLite/) {
            $dbh = $db->connect('harness_ui', AutoCommit => 1, RaiseError => 1);
        }
        else {
            $dbh = $db->connect('quickdb', AutoCommit => 1, RaiseError => 1);
            $dbh->do('CREATE DATABASE harness_ui') or die "Could not create db " . $dbh->errstr;
        }

        $db->load_sql(harness_ui => "${schemadir}/${schema_file}");
    }

    mkdir("./tmp");
    system('rm', '-rf', "./tmp/$schema");
    mkdir("./tmp/$schema");

    my $pid = fork;
    if ($pid) {
        waitpid($pid, 0);
        die "Child process failed ($?)" if $?;
    }
    else {
        make_schema_at(
            'App::Yath::Schema',
            {
                debug => 0,

                dump_directory => "./tmp/$schema",
                generate_pod   => 0,

                skip_load_external => 1,

                moniker_map => sub {
                    my ($table, $name) = @_;

                    return "JobTry" if $name eq 'JobTries';
                    return $name;
                },

                rel_name_map => sub {
                    my ($info) = @_;

                    return 'children'
                        if $info->{remote_columns}
                        && $info->{local_columns}
                        && $info->{name}                eq 'events'
                        && $info->{local_class}         eq 'App::Yath::Schema::Result::Event'
                        && $info->{remote_class}        eq 'App::Yath::Schema::Result::Event'
                        && $info->{remote_columns}->[0] eq 'parent_event'
                        && $info->{local_columns}->[0]  eq 'event_id';

                    return "coverage" if $info->{name} eq 'coverages';
                    return "reports"  if $info->{name} eq 'reportings';
                    return $info->{name};
                },

                relationship_attrs => {
                    has_many   => {cascade_delete => 1},
                    might_have => {cascade_delete => 1},
                },

                components => [
                    "InflateColumn::DateTime",
                    "InflateColumn::Serializer",
                    "InflateColumn::Serializer::JSON",
                ],
            },
            [$db->connect_string('harness_ui'), '', ''],
        );
        exit 0;
    }

    my $extra = '';
#    $extra .= "use DBIx::Class::Storage::DBI::MariaDB;\n" if $schema =~ m/(MySQL|Percona|MariaDB)/i;

    system("rm -rf lib/App/Yath/Schema/${schema}");
    mkdir "lib/App/Yath/Schema/${schema}";
    open(my $fh, '>', "lib/App/Yath/Schema/${schema}.pm") or die "Could not open file: $!";
    print {$fh} <<"    EOT";
package App::Yath::Schema::${schema};
use utf8;
use strict;
use warnings;
use Carp();
$extra
our \$VERSION = '$version';

# DO NOT MODIFY THIS FILE, GENERATED BY ${ \__FILE__ }\n

eval { require ${dbd_driver}; 1 } or die "'${dbd_driver}' must be installed, could not load: \$@";
eval { require ${format}; 1 } or die "'${format}' must be installed, could not load: \$@";

Carp::confess("Already loaded schema '\$App::Yath::Schema::LOADED'") if \$App::Yath::Schema::LOADED;

\$App::Yath::Schema::LOADED = "${schema}";

require App::Yath::Schema;

1;

__END__

=pod

=encoding UTF-8

=head1 NAME

App::Yath::Schema::${schema} - Autogenerated schema file for ${schema}.

=head1 SOURCE

The source code repository for Test2-Harness can be found at
L<http://github.com/Test-More/Test2-Harness/>.

=head1 MAINTAINERS

=over 4

=item Chad Granum E<lt>exodist\@cpan.orgE<gt>

=back

=head1 AUTHORS

=over 4

=item Chad Granum E<lt>exodist\@cpan.orgE<gt>

=back

=head1 COPYRIGHT

Copyright Chad Granum E<lt>exodist7\@gmail.comE<gt>.

This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

See L<http://dev.perl.org/licenses/>

=cut
    EOT
    close($fh);

    opendir(my $dh, "tmp/$schema/App/Yath/Schema/Result/") or die "Could not open dir: $!";
    for my $file (sort readdir($dh)) {
        next unless $file =~ m/(.+)\.pm$/;
        my $pkg = $1;

        my $dest = "lib/App/Yath/Schema/${schema}/$file";
        print "Found ${file}\n";

        my $from = "tmp/$schema/App/Yath/Schema/Result/$file";
        process_uuid($from);
        process_pkg($from, $schema);
        open(my $fh, '>>', $from) or die "Could not open '$from': $!";
        print $fh <<"        EOT";

__END__

=pod

=encoding UTF-8

=head1 NAME

App::Yath::Schema::${schema}::${pkg} - Autogenerated result class for ${pkg} in ${schema}.

=head1 SOURCE

The source code repository for Test2-Harness can be found at
L<http://github.com/Test-More/Test2-Harness/>.

=head1 MAINTAINERS

=over 4

=item Chad Granum E<lt>exodist\@cpan.orgE<gt>

=back

=head1 AUTHORS

=over 4

=item Chad Granum E<lt>exodist\@cpan.orgE<gt>

=back

=head1 COPYRIGHT

Copyright Chad Granum E<lt>exodist7\@gmail.comE<gt>.

This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

See L<http://dev.perl.org/licenses/>

=cut
        EOT
        close($fh);
        rename($from, $dest) or die "Could not move ${file}: $!";

        my $result = "lib/App/Yath/Schema/Result/$file";
        open(my $oh, '>', $result) or die "Could not open result file: $!\n";
        print $oh <<"        EOT";
package App::Yath::Schema::Result::$pkg;
use utf8;
use strict;
use warnings;

our \$VERSION = '$version';

# DO NOT MODIFY THIS FILE, GENERATED BY ${ \__FILE__ }\n

use Carp qw/confess/;
confess "You must first load a App::Yath::Schema::NAME module"
    unless \$App::Yath::Schema::LOADED;

require "App/Yath/Schema/\${App::Yath::Schema::LOADED}/${pkg}.pm";
require "App/Yath/Schema/Overlay/${pkg}.pm";

1;

__END__

=pod

=encoding UTF-8

=head1 NAME

App::Yath::Schema::Result::$pkg - Autogenerated result class for $pkg.

=head1 SOURCE

The source code repository for Test2-Harness can be found at
L<http://github.com/Test-More/Test2-Harness/>.

=head1 MAINTAINERS

=over 4

=item Chad Granum E<lt>exodist\@cpan.orgE<gt>

=back

=head1 AUTHORS

=over 4

=item Chad Granum E<lt>exodist\@cpan.orgE<gt>

=back

=head1 COPYRIGHT

Copyright Chad Granum E<lt>exodist7\@gmail.comE<gt>.

This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

See L<http://dev.perl.org/licenses/>

=cut
        EOT
        close($oh);

        my $override = "lib/App/Yath/Schema/Overlay/$file";
        unless (-e $override) {
            print "Adding 'override' file '$override'\n";
            open(my $oh, '>', $override) or die "Could not open override file: $!\n";
            my $pkg = $file;
            $pkg =~ s/\.pm$//;
            print $oh <<"            EOT";
package App::Yath::Schema::Overlay::$pkg;
our \$VERSION = '$version';

package
    App::Yath::Schema::Result::$pkg;
use utf8;
use strict;
use warnings;

use Carp qw/confess/;
confess "You must first load a App::Yath::Schema::NAME module"
    unless \$App::Yath::Schema::LOADED;

1;

__END__

=pod

=encoding UTF-8

=head1 NAME

App::Yath::Schema::Overlay::$pkg - Overlay for $pkg result class.

=head1 DESCRIPTION

This is where custom (not autogenerated) code for the $pkg result class lives.

=head1 SOURCE

The source code repository for Test2-Harness can be found at
L<http://github.com/Test-More/Test2-Harness/>.

=head1 MAINTAINERS

=over 4

=item Chad Granum E<lt>exodist\@cpan.orgE<gt>

=back

=head1 AUTHORS

=over 4

=item Chad Granum E<lt>exodist\@cpan.orgE<gt>

=back

=head1 COPYRIGHT

Copyright Chad Granum E<lt>exodist7\@gmail.comE<gt>.

This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

See L<http://dev.perl.org/licenses/>

=cut
            EOT
            close($oh);
        }
    }

    exit(0) unless $$ == $start_pid;
}

exit(0) unless $$ == $start_pid;

sub process_pkg {
    my ($file, $schema) = @_;

    open(my $fh, "<", $file) or die "Could not open file '$file': $!";

    my @lines;
    for my $line (<$fh>) {
        if ($line =~ m/^package (.*);$/) {
            my $pkg = $1;
            my $real_pkg = $pkg;
            $real_pkg =~ s/::Result::/::${schema}::/g;

            push @lines => (
                "package $real_pkg;\n",
                "our \$VERSION = '$version';\n\n",
                "package\n    $pkg;\n",
            );
        }
        else {
            push @lines => $line;
        }
    }

    close($fh);
    open($fh, '>', $file) or die "Could not open file '$file': $!";
    print $fh @lines;
    close($fh);
}

sub process_uuid {
    my ($file) = @_;

    open(my $fh, "<", $file) or die "Could not open file '$file': $!";

    my ($found, $end) = (0, 0);
    my $columns = '';
    my @lines;
    while (my $line = <$fh>) {
        if ($line =~ m/DO NOT MODIFY THE FIRST PART OF THIS FILE/) {
            push @lines => "# DO NOT MODIFY ANY PART OF THIS FILE\n";
            next;
        }

        if ($line =~ m/DO NOT MODIFY THIS OR ANYTHING ABOVE/) {
            last;
        }

        if ($line =~ m/use base 'DBIx::Class::Core';/) {
            push @lines => "use parent 'App::Yath::Schema::ResultBase';\n";
            next;
        }

        push @lines => $line;

        if ($line =~ m/^__PACKAGE__->add_columns\(/) {
            $found ||= $.;
            next;
        }

        next if $end;
        next unless $found;

        if ($line =~ m/^\);/) {
            $end = 1;
            next;
        }

        $columns .= $line;
    }
    close($fh);

    $columns = "(\n#line $found $file\n$columns)";
    my %cols = eval $columns or die $@;

    my @uuids;
    for my $col (keys %cols) {
        my $data = $cols{$col} or next;
        next unless $col =~ m/_uuid$/;
        next unless $data->{data_type} eq 'binary';
        next unless $data->{size} == 16;
        push @uuids => $col;
    };

    open($fh, '>', $file) or die "Could not open file '$file': $!";
    print $fh @lines;

    if (@uuids) {
        my $specs = join "\n" => map { "__PACKAGE__->inflate_column('$_' => { inflate => \\&App::Yath::Schema::Util::format_uuid_for_app, deflate => \\&App::Yath::Schema::Util::format_uuid_for_db });" } @uuids;
        print $fh "$specs\n";
    }

    print $fh "# DO NOT MODIFY ANY PART OF THIS FILE\n";
    print $fh "\n1;\n";
    close($fh);
}

system('rm -rf ./tmp');
